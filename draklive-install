#!/usr/bin/perl

# Must be done as early as possible to avoid issues when displaying translated
# strings
BEGIN {
    push @::textdomains, 'draklive-install';
}

use lib qw(/usr/lib/libDrakX);
use standalone;
use interactive;
use fs;
use fs::any;
use fs::type;
use fs::partitioning;
use fs::partitioning_wizard;
use check_min_sys_requirements;
use partition_table;
use MDK::Common;
use common;
use feature qw(state);
use File::Copy;
use background;

($::real_windowwidth, $::real_windowheight) = (600, 400);

{
    use diskdrake::interactive;
    package diskdrake::interactive;
    my $old = \&hd_possible_actions_base;
    undef *hd_possible_actions_base;
    *hd_possible_actions_base = sub {
	#- for the partition wizard to show the auto-allocate option
	local $::isInstall = 1;
	&$old;
    };
    undef *Done;
    #- skip the fstab/reboot checks
    *Done = \&diskdrake_interactive_Done;
    #- don't ask whether to Move/Hide old files
    undef *need_migration;
    *need_migration = sub { 'hide' };
}

install_live();


sub install_live() {
    my $in = 'interactive'->vnew('su');
    my $running_wm = any::running_window_manager();
    background::show_bg_window if ($running_wm eq 'drakx-matchbox-window-manager');

    $in->{pop_wait_messages} = 0;

    $::isWizard = 1;
    $::Wizard_no_previous = 1;
    $::Wizard_pix_up = "live-install-icon";
    any::set_wm_hints_if_needed($in);

    my $all_hds = {};
    my $fstab = [];
    $::prefix = '/mnt/install';

    my $system_file = '/etc/sysconfig/draklive-install';
    my %settings = getVarsFromSh($system_file);

    my $copy_source = $settings{SOURCE} || '/';
    my $live_media = '/live/media';

    display_start_message();
    check_min_sys_requirements::main($in);
    init_hds($in, $all_hds, $fstab, $live_media);
    clean_osprober_mnts();
    ask_partitions_loop($in, $all_hds, $fstab, $copy_source);
    if ($settings{'remove_unused_packages'} eq 'yes') {
        remove_unused_packages($in, $copy_source);
    }
    prepare_root($in, $all_hds);
    copy_root($in, $copy_source);
    complete_install($in, $all_hds);
    setup_bootloader($in, $all_hds, $fstab);
    #setup_initrd($in);
    finish_installation($fstab);
    display_end_message($in);
    background::hide_bg_window if ($running_wm eq 'drakx-matchbox-window-manager');
    $in->exit(0);
}

sub umount_all {
    my ($fstab) = @_;
    #- make sure nothing is mounted in the new root
    foreach (sort { $b cmp $a } grep { /^$::prefix/ } map { (split)[1] } cat_('/proc/mounts')) {
        system('umount', $_);
    }
    #- make sure selected devices aren't mounted, and swap isn't used
    foreach (grep { isSwap($_) } @$fstab) {
        eval { fs::mount::swapoff($_->{device}) };
    }
    foreach (map { $_->{mntpoint} && !isSwap($_) ? "/dev/$_->{device}" : () } @$fstab) {
        system('umount', $_);
    }
}

sub on_reboot_needed {
    my ($in) = @_;
    fs::partitioning_wizard::warn_reboot_needed($in);
    $in->exit(0);
}

sub display_start_message() {
    require any;
    my $running_wm = any::running_window_manager();
    my $has_running_wm = to_bool($running_wm);   
    local $::isStandalone = $has_running_wm; # center me if run in xsetup.d script
    mygtk2::enable_quit_popup(1);
    my $w = ugtk2->new(N("OpenMandriva Lx Live"));
    return if ($running_wm eq 'drakx-matchbox-window-manager');
    #ROSAOne-install icon does look like it's openclipart, so stay with it for now
    ugtk2::gtkadd($w->{window},
                  ugtk2::gtkcreate_img("live-install"),
                  ugtk2::gtknew('Label', height => 5),
                  N("Welcome! Let's get started installing OpenMandriva Lx."),
                  ugtk2::create_okcancel($w));
    $w->{ok}->grab_focus;
    $w->main;
}

sub umount_first_pass() {
    local $::prefix = undef;
    my $all_hds = fsedit::get_hds();
    fs::get_raw_hds('', $all_hds);
    fs::get_info_from_fstab($all_hds);
    my $fstab = [ fs::get::fstab($all_hds) ];
    fs::merge_info_from_mtab($fstab);

    #- inlined from fs::mount::umount_all to go on when one umount fail
    #- (maybe the sort function could be shared)
    log::l("unmounting all filesystems");
    foreach (sort { $b->{mntpoint} cmp $a->{mntpoint} } 
	       grep { $_->{mntpoint} && !$_->{real_mntpoint} } @$fstab) {
	eval { fs::mount::umount_part($_) };
	log::l("error unmounting $_->{mntpoint}: $@") if $@;
    }
}

sub clean_osprober_mnts() {
	system('umount -l /run/os-prober/dev/*');
}
	



sub init_hds {
    my ($in, $all_hds, $fstab, $live_media) = @_;
    my $wait = $in->wait_message('', N("Please wait"));
    umount_first_pass();
    eval { fs::any::get_hds($all_hds, $fstab, [], {}, 'skip_mtab', $in) };

    #- fs::any::get_hds does not return mounts that are not in fstab
    my @mounted = fs::read_fstab('', '/proc/mounts');
    my $live_part = find { $_->{mntpoint} eq $live_media } @mounted;
    my $live_device = $live_part && $live_part->{device};
    #- remove live device from the detected hds, so that bootloader is not installed on it:
    #-  bootloader installation uses first device from detect_devices::get, which tries to list devices
    #-  by booting order, and our live system is likely to be here in first position
    #- it can be either a partition (USB) or the full disk (Hybrid on USB)
    @{$all_hds->{hds}} = grep {
        $_->{device} ne $live_device &&
        !member($live_device, map { $_->{device} } partition_table::get_normal_parts_and_holes($_));
    } @{$all_hds->{hds}} if $live_device;

    my $err = $@;
    umount_all($fstab);
    if ($err) {
        undef $wait;
        $in->ask_warn(N("Error"), [ formatError($err) ]);
        $in->exit(1);
    }
}

sub ask_partitions_loop {
    my ($in, $all_hds, $fstab, $copy_source) = @_;

    while (1) {
        eval { ask_partitions($in, $all_hds, $fstab, $copy_source) };
        my $err = $@ or last;
        $in->exit(1) if $err =~ /wizcancel/ ||
          !$in->ask_warn(N("Error"), [ N("An error occurred"), formatError($err) ]);
    }
}

sub ask_partitions {
    my ($in, $all_hds, $fstab, $copy_source) = @_;
    fs::partitioning_wizard::main($in, $all_hds, $fstab, [], undef, {}, 'skip_mtab');

    mkdir_p($::prefix) or die "unable to create $::prefix";

    fs::any::write_hds($all_hds, $fstab, undef, sub { on_reboot_needed($in) }, {});
    fs::any::check_hds_boot_and_root($all_hds, $fstab);
    fs::partitioning::choose_partitions_to_format($in, $fstab);

    my $total = get_live_system_size();

    # add the headroom to the size for display of how much we really need
    my $minAvailableSize = 65 * sqr(1024);
    my $needed = $needed + max(0.1 * $total, $minAvailableSize);

    # report the actual size asked for (getAvailableSpace returns the amount minus the headroom)
    my $raw_available =  fs::any::getAvailableSpace_raw($fstab) * 512 / 1.07;

    my $available = fs::any::getAvailableSpace($fstab, 'skip_mounted');
    die N("Not enough space available (%s available while %s are needed)",
          formatXiB($raw_available), formatXiB($needed)) . "\n"
      if $total > $available;

    umount_all($fstab);
    fs::partitioning::format_mount_partitions($in, $all_hds, $fstab);
}

sub remove_unused_packages {
    my ($in, $o_prefix) = @_;
    require pkgs;
    #in remove_unused_packages, we want to get the locale from the currently
    #running system, but we want to remove unused packages from the 
    #system based in $o_prefix, that's why we use an extra arg instead of 
    #directly using $::prefix
    local $::prefix;
    pkgs::remove_unused_packages($in, $in->do_pkgs, $o_prefix);
}

sub prepare_root {
    my ($in, $all_hds) = @_;
    #- create required directories and devices (early to have a consistent root before calling other programs)
    my $_wait = $in->wait_message('', N("Please wait"));
    fs::any::prepare_minimal_root;
}

sub build_copy_command {
    my ($source, $dest) = @_;
    # Some might be curious, why not use normal cp? Well, at least I was. So I googled a little, and the most
    # satisfying answer was, with two simultaneous processes the I/O scheduler improves performance.
    # Another question is, whether to use plain or gzipped tar-pipe stream. Results of testing on VirtualBox
    # (time of copying):
    # no compression:    5:56
    # gzip compression:  8:10
    # xz compression:   33:25
    # So, obviously, it's better to leave it uncompressed.
    join(' ',
	'tar', 'c', '--one-file-system', '--exclude=/etc/localtime','--exclude=/etc/sysconfig/clock',
	'-C', $source, '.',
	'|',
	'tar', 'xvv', '-C', $dest,
     );
}

sub sync_logs() {
    cp_af('/var/log', $::prefix . '/var');
}

sub copy_root {
    my ($in, $copy_source) = @_;
    my $total = get_live_system_size();
    (@process_images) = &get_advert_list(); 
	my $image_count = scalar(@process_images);
    my $switch_level = ($image_count > 0 ? $total / ($image_count + 1) : $total) ;
						# if only one image is set - ignore switching
    my ($wait, $update_progress, $image) = copying_message_with_progress_bar($in, N("Copying in progress"),
		"OpenMandriva-advert");
    my $current_image = 0;	# index of the current image in the @process_images array
    my $next_level = $switch_level;

    open(my $OUTPUT, '-|', build_copy_command($copy_source, $::prefix));
    {
        local $_;
        my $current = my $previous = 0;
        while (<$OUTPUT>) {
            (undef, undef, my $size) = split;
            $current += $size;
            if ($current <= $total && $current/$total > $previous/$total + 0.005) {
                $update_progress->('', $current, $total);
                $previous = $current;
		if ($current  >= $next_level) {
			# change image
			$next_level += $switch_level;
			$image->($process_images[$current_image++]);
		}
            }
        }
    }
    if (!close($OUTPUT)) {
        undef $wait;
        undef $update_progress;
        $in->ask_warn(N("Error"), N("Unable to copy files to new root"));
        $in->exit(1);
    }
    sync_logs();
}

sub clean_harddrake_hds {
    my ($prefix) = @_;
    #- remove harddisks from harddrake's config file, so that hardddisks
    #- are automatically rediscovered at first boot
    require Storable;
    my $harddrake_file = $prefix . "/etc/sysconfig/harddrake2/previous_hw";
    my $harddrake_conf = eval { Storable::retrieve($harddrake_file) };
    if ($harddrake_conf) {
        delete $harddrake_conf->{HARDDISK};
        Storable::store($harddrake_conf, $harddrake_file);
    }
}


sub complete_install {
    my ($in, $all_hds) = @_;
    my $_wait = $in->wait_message('', N("Please wait"));

    my $real_rpm_dir = "/tmp/rpm/real";
    cp_f(glob($real_rpm_dir . "/*"), $::prefix . "/var/lib/rpm") if -d $real_rpm_dir;

    #- FIXME: maybe factorize with draklive, using draklive --clean-chroot ?
    #- remove unwanted files and packages
#	$in->ask_okcancel('', N("live_user and live_user_desktop"));	

    my $live_user = chomp_(cat_('/etc/draklive-install.d/user'));
    my $live_user_desktop = $live_user && chomp_(run_program::rooted_get_stdout($::prefix, "su - $live_user -c 'xdg-user-dir DESKTOP'"));
    unlink(map { $::prefix . $_ } '/.autofsck',
           chomp_(cat_(glob('/etc/draklive-install.d/remove.d/*'))),
           if_($live_user_desktop,
               $live_user_desktop . '/draklive-copy-wizard.desktop',
               $live_user_desktop . '/draklive-install.desktop'),
           );

    foreach (glob('/etc/draklive-install.d/run.d/*')) {
	    run_program::rooted($::prefix, $_);
    }

    {
        #- do not allow update-menus to create home directory with invalid perms
        local $ENV{HOME} = '/root';
        system('chroot', $::prefix, 'rpm', '-e', 'draklive-install');

        # remove the boot kernel if it exists
        my $bkf = $::prefix . '/boot_kernel';
        if(-e $bkf)
        {
           my $kern_type = `cat $bkf | xargs`;
           chomp($kern_type);
           my @kerns = `chroot $::prefix rpm -qa | grep $kern_type`;
           chomp(@kerns);
           system('chroot', $::prefix, "rpm", "-e", @kerns);
           unlink($bkf);
        }
    }

    #- copy sysconfig files for first boot
    cp_f(glob('/etc/draklive-install.d/sysconfig/*'), $::prefix . '/etc/sysconfig');

    #- allow mdkonline to be started again
    eval { rm_rf($::prefix . '/etc/skel/.OmvOnline', glob($::prefix . '/home/*/.OmvOnline')) };

    #- unselect live user in kdm
    my $kdm_cfg = common::read_alternative('kdm4-config');
    update_gnomekderc($::prefix . $kdm_cfg,
                      'X-:0-Greeter' => (PreselectUser => 'None', DefaultUser => '')) if -f $kdm_cfg;
    my $autologin = any::get_autologin();
    delete $autologin->{user};
    any::set_autologin($in->do_pkgs, $autologin);

    #- allow to install doc in disk install
    substInFile { undef $_ if /^\%_excludedocs/ } $::prefix . '/etc/rpm/macros';

    fs::write_fstab($all_hds, $::prefix);

    clean_harddrake_hds($::prefix);

    # enable back some disabled services
    # (tpg) disable services call on install
    # require services;
    # services::start_service_on_boot($_) foreach chomp_(cat_('/etc/draklive-install.d/services'));


    sync_logs();
}

# Function formats information to be displayed as user-friendly description in the list of available HDDs
sub format_hdd_info {
	my ($hdd_info) = @_;

	# First, the device name is taken
	my $descr = $_->{'file'};

	# If there is additional information it will be appended in parentheses
	if ($_->{'info'} || $_->{'totalsectors'}) {
		# Collect printable bits of information into array (only two at the moment, but who knows
		# what we'll wish to add here in the future)
		my @data = ();
		if ($_->{'totalsectors'}) {
			# Size of the disk in Megabytes
			my $size = $_->{'totalsectors'} / 2048;
			my $unit = N(" Mb\n");
			if ($size > 1536) {
				# If larger than 1,5 Gb, show size in Gigabytes
				$size /= 1024;
				$unit = N(" Gb\n");
			}
			# Reusing existing translation units " Mb\n" and " Gb\n", but strip them of "\n"
			$unit =~ s/\n//g;
			push @data, (int($size + 0.5) . $unit);
		}
		if ($_->{'info'}) {
			# User-friendly name of the disk (manufacturer, model or whatever)
			push @data, $_->{'info'};
		}
		# And finally, join together all those bits of information we were able to collect
		$descr .= ' (' . join(', ', @data) . ')';
	}
	return $descr;
}

# Function for updating the Grub2 configuration file
# Input parameters:
#    $file        - target file name (with path)
#    $set_options - refhash with all the options to set/change (other existing options will not be changed),
#                   sample format is: { 'GRUB_DISABLE_RECOVERY' => { 'type' => 'bool', value => 1 } }
#                   Boolean values will be translated into "true/false", others written as is.
sub update_grub_options {
	my ($file, $set_options) = @_;

	# First, we read and parse existing file to store the unchanged options
	# (if there is no file, then it will be created with the new options only, so no problem)
	my %current_options = ();
	if (open(GRUB, '<', $file)) {
		my $data;
		read(GRUB, $data, -s(GRUB));
		close(GRUB);
		%current_options = map { split('=', $_, 2); } split(m/\n/, $data);
	}

	# Now update/supplement the collected set of options with the new ones
	foreach (keys(%$set_options)) {
		if ($set_options->{$_}->{'type'} eq 'bool') {
			$current_options{$_} = ($set_options->{$_}->{'value'} ? 'true' : 'false');
		}
		else {
			$current_options{$_} = $set_options->{$_}->{'value'};
		}
	}

	# And finally write all the options back into the file
	if (open(GRUB, '>', $file)) {
		print GRUB join("\n", map { "$_=$current_options{$_}" } keys(%current_options));
		close(GRUB);
	}
	else {
		return 0;
	}
	return 1;
}

sub find_efi_sys_parts() {
  my @parts = `parted -lsm  | awk -F: '{print \$1 ":" \$5 ":" \$7}'`;

  my $curr_device = "";

  my @potentials = ();

  foreach $part (@parts)
  {
     my ($num, $type, $boot) = split(/:/, $part);

     if ($num =~ /^\/dev/) {
       $curr_device = $num;
       print "Scanning $curr_device\n";
     }

     if ($boot =~ /esp/ && $type =~ /fat/)
     {
        push(@potentials, "${curr_device}$num");

     }
   }

   return @potentials;
}

sub setup_bootloader {
    my ($in, $all_hds, $fstab) = @_;

    my $install_device;
    my %options = (
        # Default options. See Grub2 documentation about /etc/default/grub for complete list,
        # but here we use only the most common ones
        'GRUB_TIMEOUT' => { 'type' => 'int', value => 5 },
        'GRUB_DISABLE_LINUX_UUID' => { 'type' => 'bool', value => 0 }
        # GRUB_DISABLE_RECOVERY
        # GRUB_GFXMODE
    );
#Extra grub2 flags can be added here
    my %grub2_flags = ('--bootloader-id' => { 'type' => '=', 'value' => 'openmandriva'});
    my @boot_devices = map { $_->{'file'} } @{$all_hds->{'hds'}};
    my %boot_devices_info = map { $_->{'file'} => format_hdd_info($_) } @{$all_hds->{'hds'}};

    # Trying to install Grub2 again and again until success or excplicit rejection from user
    my $install_err = 1;
    while ($install_err) {
        # Let the user set all the parameters for installing bootloader
        $in->ask_from_({ title => N("Bootloader main options"),
                         interactive_help_id => 'setupBootloader',
                       }, [
            { label => N("Bootloader"), title => 1 },
            { label => N("Boot device"), val => \$install_device, list => \@boot_devices, allow_empty_list => 1,
              format => sub { $boot_devices_info{$_[0]} } },
	    #Extra grub2 entries can be added here
            { label => N("Bootloader-id"), val => \$grub2_flags{'--bootloader-id'}->{'value'}},
            { label => N("Main options"), title => 1 },
            { label => N("Delay before booting default image"), val => \$options{'GRUB_TIMEOUT'}->{'value'} },
            { text => N("Disable UUID"), val => \$options{'GRUB_DISABLE_LINUX_UUID'}->{'value'}, type => 'bool', advanced => 1 },
        ]) or return 0;

        # Now let's rock and roll!
        my $_wait = $in->wait_message(N("Bootloader"), N("Please wait while the bootloader is being installed..."));

        # Write down the options NOTE CC CHANGED PATH HERE
        if (!update_grub_options('/etc/default/grub', \%options)) {
            $in->ask_warn(N("Warning"), N("Failed to update Grub2 configuration:") . " $!\n" . N("Continuing with default settings."));
        }

        # To install Grub2 we chroot into the freshly installed OpenMandriva and perform the installation from there,
        # otherwise strange errors happen.
        # So, first we determine whether we are on an EFI system by checking to see if the efivars filesystem is mounted. 
        # If it is we need to mount the EFI (ESP) partition AFTER chrooting. In addition the bootloader-id flag to grub2-install is generated.
        # Amongst other things the bootloader-id flag generates an entry for the efibootmgr utility which creates a new boot entry loaded with
        # the correct parameters to boot the system NO error checking is performed on this variable if it is incorrect the system will fail to boot.

        $sys_is_efi=is_uefi();

        if ($sys_is_efi) {
	    for $gc ( keys %grub2_flags ) {
	      $go =  $grub2_flags{'--bootloader-id'}{'type'};
	      $ga = $grub2_flags{'--bootloader-id'}{'value'};
	      $g2arg = "$gc$go$ga";
	      print "$g2arg";
		last;
	    }
	$sys_esp_mounted=(system("/bin/sh -c mount | grep '\/mnt\/install\/boot\/efi'"));
            # The esp directory must not be mounted prior to the chroot otherwise grub2 will use incorrect uuid's for the grub.cfg file.
	if ($sys_esp_mounted == 0) {
	    (system('umount /mnt/install/boot/efi'));
	    }
        }
	# So, first we try to prepare chroot environment by mounting system-related mount points.
        if (system('mount --bind /proc /mnt/install/proc && mount --bind /sys /mnt/install/sys && mount --bind /dev /mnt/install/dev') != 0 ) {
	       if ($sys_is_efi) {
			system('mount -t efivarfs /sys/firmware/efi/efivars /mnt/install/sys/firmware/efi/efivars'); 
            # Failure, ask what to do now (exit Grub2 installation or try again)
            # Reuse $install_err as user's reply: Yes -> $install_err==1 -> repeat the loop
            # (Would like to use redo here, but it would skip the continue block, and I need it to run)
	     $install_err = $in->ask_yesorno(N("Error"), N("Failed to prepare chroot for installing Grub2:") . " $!\n" . N("Try again?"), 1);
            next;

		}
	}
        # First we must be sure that we can mount EFI partiton r/w to do this the os-prober ro mount must be removed.
        # If the efivars fs is mounted on /sys/firmware/efi then we must also mount it on the chroot 
        # to allow grub2-install to create a bootloader entry.
        # Now install the Grub2 itself and create menu configuration for it.
        if ($sys_is_efi) {
    	    system('mount -t efivarfs /sys/firmware/efi/efivars /mnt/install/sys/firmware/efi/efivars');
            my @potential_esp = find_efi_sys_parts();

            my $num_esp = @potential_esp;

            my $chosen_esp = "ERROR";
            if($num_esp == 0)
            {
               $in->ask_warn(N("Error"), N("No ESP partition detected."));
               $in->exit(1);
            }
            elsif($num_esp == 1)
            {
               $chosen_esp = $potential_esp[0];
            }
            else
            {
               $chosen_esp = $in->ask_from_list("Choose EFI Partition", "Multiple EFI System partitions found", \@potential_esp);
            }

    	    $install_err = system("chroot /mnt/install /bin/sh -c 'mount -t vfat $chosen_esp /boot/efi && echo boot=$install_device > /boot/grub2/drakboot.conf && grub2-install $g2arg $install_device && grub2-mkconfig -o /boot/grub2/grub.cfg'");}
 
            if(!$install_err) {
               # workaround in case of buggy firmware which requires EFI/boot/BOOTX64.EFI
               system("mkdir -p /mnt/install/boot/efi/EFI/boot");

               my $default_efi_loc = '/mnt/install/boot/efi/EFI/boot/BOOTX64.EFI';
               my $bl_id = $grub2_flags{'--bootloader-id'}->{'value'};
               my $our_efi_loc = "/mnt/install/boot/efi/EFI/$bl_id/grubx64.efi";

               if(!-e $default_efi_loc) {
                  $install_err = system("cp $our_efi_loc $default_efi_loc");
               }
            }
        else {
    	    $install_err = system("chroot /mnt/install /bin/sh -c 'echo boot=$install_device > /boot/grub2/drakboot.conf && grub2-install $install_device && grub2-mkconfig -o /boot/grub2/grub.cfg'");}
        if ($install_err != 0) {
            $install_err = $in->ask_yesorno(N("Error"), N("Failed to install Grub2:") . " $!\n" . N("Try again?"), 1);
            next;
        }
    } continue {
        # After each iteration unmount the system-related mount points to avoid multi-mounts
        system('umount /mnt/install/dev umount /mnt/install/sys; umount /mnt/install/proc');
    }
}

sub setup_initrd {
	my ($in, $live_media) = @_;
	# use universal initrd image from the DVD
   	my $src_file = '/run/initramfs/live/isolinux/initrd0.img';
	my $dst_file = $::prefix.'/boot/initrd.img';

    my $_wait = $in->wait_message('Bootloader', N("Please wait while initrd is prepared"));
	# if initrd image has been created before by accident, remove it
	if (-e $dst_file) { unlink $dst_file; }
	# copy universal initrd file into /boot directory
	if (!copy($src_file, $dst_file)) {
		# something went wrong...
		$in->ask_warn(N("Error"), N("Unable to copy initrd.img  to new /boot directory"));
		$in->exit(1);
	} else {
		system('sync');
		$_wait = N("initrd.img has been created");
	}
}

sub clean_live_system_hds() {
    #- clean fstab and harddrake config in the live system
    #- since partitions UUIDs of the installed system have been modified
    #- (useful for persistent live systems)
    local $::prefix = undef;
    clean_harddrake_hds($::prefix);
    my $all_hds = fs::get::empty_all_hds(); #- skip real harddisks
    fs::get_raw_hds('', $all_hds);
    fs::get_info_from_fstab($all_hds);
    fs::write_fstab($all_hds, $::prefix);
    
}

sub finish_installation {
    my ($fstab) = @_;
    sync_logs();
    #- cleanly umount here, it will avoid fs journals to be corrupted after a hackish reboot
    system('/usr/sbin/clean_live_hds');
    umount_all($fstab);
    clean_live_system_hds();
}

sub display_end_message {
    my ($in) = @_;
    $::Wizard_finished = 1;
    my $msg = N("Congratulations for installing OpenMandriva. Please halt your computer, remove your live system, and restart your computer.");
    if (cat_('/proc/cmdline') =~ m/\bvncinstall\b/) {
        $msg .= "\n\n" . N("Your VNC connection will be dropped. Please reconnect after the computer is restarted.");
    }

    require ugtk2;
    ugtk2->import(':all');
    require mygtk2;
    mygtk2->import('gtknew');
    my $w = ugtk2->new(N("Congratulations"));
    gtkadd($w->{rwindow},
           gtkpack_(gtknew('VBox', border_width => 10),
                    1, gtknew('Label', width => 540, text => $msg, alignment => [0, 0], padding => [25, 15], line_wrap => 1),
                    0, gtknew('HSeparator'),
                    0, gtkpack(create_hbox('end'),
                               gtknew('Button', text => N("Finish"),
                                      clicked => sub { Gtk2->main_quit })
                       ),
           ),
    );
    mygtk2::set_main_window_size($w->{rwindow});
    $w->{real_window}->grab_focus;
    $w->{real_window}->show_all;
    $w->main;
}

###
### duplicate code
###

#- from disdrake::interactive
{
    package diskdrake::interactive;
  sub diskdrake_interactive_Done {
    my ($in, $all_hds) = @_;
    eval { raid::verify($all_hds->{raids}) };
    if (my $err = $@) {
	$::expert or die;
	$in->ask_okcancel('', [ formatError($err), N("Continue anyway?") ]) or return;
    }
    foreach (@{$all_hds->{hds}}) {
	if (!write_partitions($in, $_, 'skip_check_rebootNeeded')) {
	    return if !$::isStandalone;
	    $in->ask_yesorno(N("Quit without saving"), N("Quit without writing the partition table?"), 1) or return;
	}
    }
    #- skip that fstab/reboot steps
    if (!$::isInstall && 0) { 
	my $new = fs::fstab_to_string($all_hds);
	if ($new ne $all_hds->{current_fstab} && $in->ask_yesorno('', N("Do you want to save /etc/fstab modifications"), 1)) {
	    $all_hds->{current_fstab} = $new;
	    fs::write_fstab($all_hds);
	}
	update_bootloader_for_renumbered_partitions($in, $all_hds);

	if (any { $_->{rebootNeeded} } @{$all_hds->{hds}}) {
	    $in->ask_warn('', N("You need to reboot for the partition table modifications to take place"));
	    tell_wm_and_reboot();
	}
    }
    if (my $part = find { $_->{mntpoint} && !maybeFormatted($_) } fs::get::fstab($all_hds)) {
	$in->ask_okcancel('', N("You should format partition %s.
Otherwise no entry for mount point %s will be written in fstab.
Quit anyway?", $part->{device}, $part->{mntpoint})) or return if $::isStandalone && 0; #- no, please
    }
    1;
  }
}

# forked from interactive::wait_message
sub copying_message {
    my ($o, $title, $image, $message, $b_temp) = @_;

    my $w = $o->wait_messageW($title, N("Copying in progress"), 
		ugtk2::gtknew('VBox', padding => 5, children_tight => [
					$image, $message, ]),1);
    push @tempory::objects, $w if $b_temp;
    my $b = before_leaving { $o->wait_message_endW($w) };

    #- enable access through set
    MDK::Common::Func::add_f4before_leaving(sub { $o->wait_message_nextW($_[1], $w) }, $b, 'set');
    $b;
}

# forked from interactive::gtk::wait_message_with_progress_bar
sub copying_message_with_progress_bar {
    my ($in, $o_titlei, $start_picture) = @_;

    my $progress = Gtk2::ProgressBar->new;
    my $image = ugtk2::gtkcreate_img($start_picture);
    my $w = copying_message($in, $o_title, $image, $progress);
    my $displayed;
    $progress->signal_connect(expose_event => sub { $displayed = 1; 0 });
    $w, sub {
	my ($msg, $current, $total) = @_;
	if ($msg) {
	    $w->set($msg);
	}

	if ($total) {
	    $progress or internal_error('You must first give some text to display');
	    $progress->set_fraction($current / $total);
	    $progress->show;
	    $displayed = 0;
	    mygtk2::flush() while !$displayed;
	} else {
	    $progress->hide if !$total;
	}
	},
	sub {
		my ($new_image_file) = @_;
		$image->set_from_file($new_image_file);
    	};
}

#
# Returns array with files, used to show advertising, while copying is performed
# Loop counter is also loaded, and to simplify further processing list with filenames
# is simply multiplied by loop counter (if any)
#
# Loop counter is stored in file LOOP in the same directory. It should contain only
# amount of loops as integer in text format. For example, 2. Loop counter is set to 1
# by default.
# 
sub get_advert_list {
	my $loop_counter = 1;
	my @tmp = ();
	# First we need to form list of the files in the proper directory
	my $advert_dir = "/usr/share/libDrakX/advert/";
	if ( ! -d $advert_dir) { print "DIR not found!!!"; return @tmp } ;
	opendir(ADDIR, $advert_dir) || die "Cannot open $advert_dir!!!";
	while (defined($filename = readdir(ADDIR))) {
		if ($filename =~ /^LOOP$/) {
			# loop counter configuration file has been found! 
			open (L, $advert_dir.$filename);
			$line = <L>;
			close L;
			($loop_counter) = $line =~ /(\d+)/;			
		}
		if ($filename =~ /(png)|(jpg)/) {
			# file with advertising image has been found
			# on this step we simply add it to the temporary array
			push(@tmp,$advert_dir.$filename);
		}
	}
	closedir(ADDIR);	

	# Now we should sort @tmp array to guarantee right sequence when images
	# are presented to user. Images can have arbitrary filenames, but they 
	# should be end by sequence suffix -02.png or -3.jpg for example.  
	@sorted_tmp = sort {
			($v1) = $a =~ /-(\d+)\./;
			($v2) = $b =~ /-(\d+)\./;
			$v1 cmp $v2;
			} @tmp;

	# Final touch - factor list of images by $loop_counter
	my @retArray = ();
	if ($loop_counter == 0) { $loop_counter = 1;}
	for ( $i = 0; $i < $loop_counter; $i++) {
		push (@retArray,@sorted_tmp);
	}
	return @retArray;
}
